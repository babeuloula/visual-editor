"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[184],{5248:function(e,t,n){n.r(t),n.d(t,{assets:function(){return b},contentTitle:function(){return f},default:function(){return y},frontMatter:function(){return w},metadata:function(){return h},toc:function(){return g}});var a=n(2208),r=n(9161),i=n(4159),o=n(4758),l=n(9690),s=n(9874),u=n(1506),d="tabItem_Ftt3";function p(e){var t,n,r,o=e.lazy,l=e.block,p=e.defaultValue,c=e.values,m=e.groupId,v=e.className,w=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=c?c:w.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),h=(0,s.lx)(f,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(t=null!=p?p:null==(n=w.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=w[0])?void 0:r.props.value;if(null!==b&&!f.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,s.UB)(),k=g.tabGroupChoices,y=g.setTabGroupChoices,E=(0,i.useState)(b),N=E[0],T=E[1],x=[],M=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=k[m];null!=P&&P!==N&&f.some((function(e){return e.value===P}))&&T(P)}var C=function(e){var t=e.currentTarget,n=x.indexOf(t),a=f[n].value;a!==N&&(M(t),T(a),null!=m&&y(m,a))},S=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;n=x[a]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;n=x[r]||x[x.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":l},v)},f.map((function(e){var t=e.value,n=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return x.push(e)},onKeyDown:S,onFocus:C,onClick:C},r,{className:(0,u.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),o?(0,i.cloneElement)(w.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function c(e){var t=(0,l.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}function m(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}var v=["components"],w={sidebar_position:2},f="Client Side preview",h={unversionedId:"Preview/preview-client",id:"Preview/preview-client",title:"Client Side preview",description:"With this preview method you will receive new data on every change, you can use any front-end library to build the preview. The communication between the editor and your iframe will be done using window.postMessage and will work cross-domain.",source:"@site/docs/Preview/preview-client.mdx",sourceDirName:"Preview",slug:"/Preview/preview-client",permalink:"/visual-editor/docs/Preview/preview-client",editUrl:"https://github.com/boxraiser/visual-editor/tree/main/docs/docs/Preview/preview-client.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Server Side preview",permalink:"/visual-editor/docs/Preview/preview-server"},next:{title:"Translation",permalink:"/visual-editor/docs/translation"}},b={},g=[],k={toc:g};function y(e){var t=e.components,n=(0,r.Z)(e,v);return(0,o.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"client-side-preview"},"Client Side preview"),(0,o.kt)("p",null,"With this preview method you will receive new data on every change, you can use any front-end library to build the preview. The communication between the editor and your iframe will be done using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/fr/docs/Web/API/Window/postMessage"},"window.postMessage")," and will work cross-domain."),(0,o.kt)("p",null,"First you have to enable this preview mode when initializing the editor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3}","{3}":!0},"let editor = new VisualEditor({\n  lang: EN,\n  postMessagePreview: true\n})\n")),(0,o.kt)("p",null,"Then in your HTML you have to choose the URL that will be used for the iframe using the ",(0,o.kt)("inlineCode",{parentName:"p"},"preview")," attribute."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:"{3}","{3}":!0},'<visual-editor\n  name="content"\n  preview="http://my.server/preview"\n  iconsUrl="/[name].svg"\n></visual-editor>\n')),(0,o.kt)("p",null,"The editor will send data to this page using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/fr/docs/Web/API/Window/postMessage"},"window.postMessage")," so you'll have to subscribe to the ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," event in your application code."),(0,o.kt)(c,{mdxType:"Tabs"},(0,o.kt)(m,{value:"react",label:"React",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import type {EditorMessageEvents} from '@boxraiser/visual-editor'\n\nimport { useEffect, useState } from 'react'\nconst [data, setData] = useState([]);\n\nuseEffect(() => {\n  const listener = (message: MessageEvent<EditorMessageEvents>) => {\n    if (message.data.type === 've-data') {\n      setData(message.data.payload)\n    }\n  }\n  window.addEventListener(\"message\", listener, false);\n  return () => window.removeEventListener(\"message\", listener);\n})\n"))),(0,o.kt)(m,{value:"vue",label:"VueJS",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import type {EditorMessageEvents} from '@boxraiser/visual-editor'\nimport { onMounted, ref, onUnmounted } from 'vue'\n\nconst data = ref([])\nconst listener = (message: MessageEvent&lt;EditorMessageEvents>) => {\n  if (message.data.type === 've-data') {\n    data.value = message.data.payload\n  }\n}\nonMounted(() => {\n  window.addEventListener(\"message\", listener, false);\n})\nonUnmounted(() => {\n  window.removeEventListener(\"message\", listener);\n})\n")))),(0,o.kt)("p",null,"Then you can use the data to render your components"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- Vue example --\x3e\n<template>\n  <div v-for='item in data' :key='item._id'>\n    <component :is=\"components[item._name]\" v-bind='item' />\n  </div>\n</template>\n")),(0,o.kt)("p",null,"You can also register custom elements provided by the library to add editor controls into your preview."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {PreviewWrapper, AddButton} from '@boxraiser/visual-editor'\n\n// Register the two custom elements\ncustomElements.define('ve-wrapper', PreviewWrapper)\ncustomElements.define('ve-add', AddButton)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PreviewWrapper"),", add a button to prepend a new component above the current one and allows the element to be clickable to select a component."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AddButton"),", add a button to add a new component at a specific position.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- Vue example --\x3e\n<template>\n  <div v-for='item in data' :key='bloc._id'>\n    <ve-wrapper :data-id='item._id'>\n      <component :is=\"components[item._name]\" v-bind='bloc' />\n    </ve-wrapper>\n  </div>\n  <ve-add :data-index='data.length'></ve-add>\n</template>\n")))}y.isMDXComponent=!0}}]);